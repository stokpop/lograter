import org.gradle.internal.os.OperatingSystem

import java.time.Duration

plugins {
    id 'java'
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id 'jacoco'
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
    // check dependency updates: ./gradlew dependencyUpdates -Drevision=release
    id 'com.github.ben-manes.versions' version '0.51.0'
    id 'com.github.hierynomus.license' version '0.16.1'
    id 'com.github.spotbugs' version '6.0.25'
}

repositories {
    mavenLocal()
    mavenCentral()
}

group = 'nl.stokpop'
version = file("VERSION").readLines().first()
description = 'LogRater'

dependencies {
    implementation 'org.apache.commons:commons-compress:1.27.1'
    implementation 'ch.qos.logback:logback-classic:1.5.12'
    implementation 'org.xerial:sqlite-jdbc:3.47.0.0'
    implementation 'com.beust:jcommander:1.82'
    implementation 'joda-time:joda-time:2.13.0'
    implementation 'org.hdrhistogram:HdrHistogram:2.2.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.1'
    implementation 'net.jcip:jcip-annotations:1.0'
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation 'com.healthmarketscience.jackcess:jackcess:4.0.7'
    implementation 'com.opencsv:opencsv:5.9'
    implementation 'net.sf.jchart2d:jchart2d:3.3.2'
    testImplementation 'junit:junit:4.13.2'
    compileOnly 'org.projectlombok:lombok:1.18.34'
    compileOnly 'org.jetbrains:annotations:26.0.1'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

java {
    withJavadocJar()
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

dependencies {
    constraints {
        implementation('org.apache.xmlgraphics:xmlgraphics-commons:2.6') {
            because 'version 2.4 and earlier has server-side request forgery , caused by improper input validation by the XMPParser. CVE-2020-11988'
        }
        implementation('com.jidesoft:jide-oss:3.6.18') {
            because 'version 2.4.8 has corruption in pom: \'dependencies.dependency.systemPath\' for aqua:aqua:jar must specify an absolute path but is ${basedir}/libs/laf.jar in com.jidesoft:jide-oss:2.4.8'
        }
    }
}

license {
    // license check is broken on windows, skip
    if (OperatingSystem.current().isWindows()) ignoreFailures = true
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ext.name = 'Peter Paul Bakker, Stokpop'

    header = file("src/main/resources/META-INF/LICENSE.txt")

    excludes(["**/*.txt", "src/main/resources/META-INF/services/**", "**/*.json"])

    // the standard java style makes intellij complain about dangling javadoc
    mapping {
        java = "SLASHSTAR_STYLE"
    }
    ignoreFailures = false
    strictCheck = true
}

// https://docs.gradle.org/current/userguide/signing_plugin.html
// this only configures signing if the key is found
def hasSigningKey = project.hasProperty("signingKeyId") || project.hasProperty("signingKey")
if(hasSigningKey) {
    sign(project)
}
void sign(Project project) {
    project.signing {
        required { project.gradle.taskGraph.hasTask("publish") }
        def signingKeyId = project.findProperty("signingKeyId")
        def signingKey = project.findProperty("signingKey")
        def signingPassword = project.findProperty("signingPassword")
        if (signingKeyId) {
            useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        } else if (signingKey) {
            useInMemoryPgpKeys(signingKey, signingPassword)
        }
        sign publishing.publications.maven
    }
}

// customize the pom so it complies to Maven central requirements https://central.sonatype.org/pages/requirements.html
// https://docs.gradle.org/current/userguide/maven_plugin.html#sec:maven_pom_generation
project.plugins.withType(MavenPublishPlugin).all {
    PublishingExtension publishing = project.extensions.getByType(PublishingExtension)
    publishing.publications.withType(MavenPublication).all { mavenPublication ->
        mavenPublication.pom {
            name = "${project.group}:${project.name}"
            description = name
            url = "https://github.com/stokpop/lograter.git"
            licenses {
                license {
                    name = "The Apache License, Version 2.0"
                    url = "https://www.apache.org/licenses/LICENSE-2.0"
                }
            }
            developers {
                developer {
                    id = 'stokpop'
                    name = 'Peter Paul Bakker'
                    email = 'peter.paul.bakker@stokpop.nl'
                }
            }
            scm {
                connection = 'scm:git:https://github.com/stokpop/lograter.git'
                developerConnection = 'scm:git:git@github.com:stokpop/lograter.git'
                url = 'https://github.com/stokpop/lograter.git'
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype()
    }
    // Prevent "java.net.SocketTimeoutException: timeout", when Sonatype is slow.
    connectTimeout = Duration.ofMinutes(3)
    clientTimeout = Duration.ofMinutes(3)
}

processResources {
    def props=["version":version]
    filesMatching('lograter.properties') {
        expand(props)
    }
}

compileJava {
    options.encoding = "UTF-8"
}

javadoc {
    options.encoding = "UTF-8"
    options.addStringOption('Xdoclint:none', '-quiet')
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = file("${buildDir}/jacocoHtml")
    }
}

spotbugs {
    ignoreFailures.set(true)
}

task customFatJar(type: Jar) {

    manifest {
        attributes "Main-Class": "nl.stokpop.lograter.LogRater"
    }

    archiveBaseName.set("lograter-exec")
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    with jar
}